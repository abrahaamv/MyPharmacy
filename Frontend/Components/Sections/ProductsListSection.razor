@using Services
@using Clients
@inject ProductsClient Client;
@inject ProductService ProductService
@inject IJSRuntime JSRuntime;


<!-- Breadcrumb Section Begin -->
<div id="breadcrumb-container">
    <nav class="breadcrumb container" aria-label="Breadcrumb">
        <ol class="breadcrumb-list container">
            <li class="breadcrumb__item">
                <a href="/" class="breadcrumb__link">
                    <svg class="breadcrumb__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9 22 9 12 15 12 15 22"></polyline>
                    </svg>
                    <span class="visually-hidden">Inicio</span>
                </a>
            </li>
            <li class="breadcrumb__item">
                <span class="breadcrumb__divider">/</span>
                <span class="breadcrumb__link">Productos</span>
            </li>
        </ol>
    </nav>
</div>
<!-- Breadcrumb Section End -->

<!-- Product Section Begin -->
<section class="product">
    <div class="container">
        <div class="row">
            <div class="col-lg-3 col-md-4">
                <div class="sidebar">
                    <div class="">
                        <span>Filtrar por:</span>
                    </div>
                    <div class="sidebar__item">
                        <h4>Subcategoría</h4>
                        <ul class="scrollable-list">
                            @if (ProductService.Products != null)
                            {
                                var subcategories = ProductService.Products
                                    .Where(p => p.SubCategory != null)
                                    .Select(p => p.SubCategory)
                                    .Distinct()
                                    .OrderBy(s => s);

                                foreach (var subcategory in subcategories)
                                {
                                    <li>
                                        <label>
                                            <input type="checkbox" name="subcategory" value="@subcategory">
                                            @subcategory
                                        </label>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                    <div class="sidebar__item">
                        <h4>Marca</h4>
                        <ul class="scrollable-list">
                            @if (ProductService.Products != null)
                            {
                                var brands = ProductService.Products
                                    .Where(p => p.Brand != null)
                                    .Select(p => p.Brand)
                                    .Distinct()
                                    .OrderBy(b => b);

                                foreach (var brand in brands)
                                {
                                    <li>
                                        <label>
                                            <input type="checkbox" name="brand" value="@brand">
                                            @brand
                                        </label>
                                    </li>
                                }
                            }
                        </ul>
                    </div>

                </div>
            </div>
            <div class="col-lg-9 col-md-7">
                <div class="filter__item">
                    <div class="row">
                        <div class="col-lg-4 col-md-3">
                            <div class="filter__found">
                                <h6>Todas las categorías</h6>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4">
                            <div class="filter__found">
                                <h6><span>@ProductService.Products?.Length</span> Productos</h6>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-5">
                            <div class="filter__sort">
                                <span>Ordenar por</span>
                                <select style="display: none;">
                                    <option class="nice-select" value="0">Precio: menor a mayor</option>
                                    <option value="0">Precio: mayor a menor </option>
                                    <option value="0">Nombre, ascendente</option>
                                    <option value="0">Nombre, descendente</option>
                                    <option value="0">Descuento</option>
                                </select>
                                <div class="nice-select" tabindex="0">
                                    <span class="current">Precio: menor a mayor</span>
                                    <ul class="list">
                                        <li data-value="0" class="option selected">Precio: menor a mayor</li>
                                        <li data-value="0" class="option">Precio: mayor a menor </li>
                                        <li data-value="0" class="option">Nombre, ascendente</li>
                                        <li data-value="0" class="option">Nombre, descendente</li>
                                        <li data-value="0" class="option">Descuento</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    @if (ProductService.Products is null)
                    {
                        <p>Cargando productos...</p>
                    }
                    else
                    {
                        <div class="row product__grid">
                            @foreach (var product in ProductService.Products)
                            {
                                <div class="col-lg-3 col-md-4 col-sm-6">
                                    <div class="product__item">
                                        <div class="product__item__pic">
                                            <img src="@product.ImageUrls[0]" alt="@product.Name" loading="lazy">
                                            <ul class="product__item__pic__hover">
                                                <li><a href="/productos/@product.Category/@product.Slug"><i class="fa fa-info"></i></a></li>
                                                <li><a href="#"><i class="fa fa-heart"></i></a></li>
                                                <li><a href="#"><i class="fa fa-shopping-cart"></i></a></li>
                                            </ul>
                                        </div>
                                        <div class="product__item__text">
                                            <h6><a href="/productos/@product.Category/@product.Slug">@product.Name</a></h6>
                                            <h5>Q @product.ListPrice.ToString("F2")</h5>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>
<script>
    let isAutoScrolling = false;
    let lastScrollPosition = 0; // Última posición del scroll global
    let lastGridScrollPosition = 0; // Última posición del scroll del contenedor específico

    document.addEventListener("scroll", () => {
        const scrollPosition = window.scrollY;
        const isScrollingDown = scrollPosition > lastScrollPosition;

        console.log(`Global ScrollY: ${scrollPosition}, Last: ${lastScrollPosition}`);

        if (
            !isAutoScrolling &&
            isScrollingDown &&
            lastScrollPosition === 0 &&
            scrollPosition > 0 &&
            scrollPosition <= 10 // Detectar un scroll inicial entre 1 y 10
        ) {
            const breadcrumb = document.getElementById("breadcrumb-container");
            if (breadcrumb) {
                isAutoScrolling = true; // Marcar como automático
                breadcrumb.scrollIntoView({ behavior: "smooth" });

                // Resetear el estado después del desplazamiento
                setTimeout(() => {
                    isAutoScrolling = false;
                }, 500);
            }
        }

        lastScrollPosition = scrollPosition;
    });

    // Detectar scroll dentro de la product__grid
    document.addEventListener("DOMContentLoaded", () => {
        const productGrid = document.querySelector(".product__grid");

        if (productGrid) {
            productGrid.addEventListener("scroll", () => {
                const gridScrollPosition = productGrid.scrollTop;
                const isGridScrollingDown = gridScrollPosition > lastGridScrollPosition;

                console.log(`Grid ScrollY: ${gridScrollPosition}, Last: ${lastGridScrollPosition}`);

                if (
                    !isAutoScrolling &&
                    isGridScrollingDown
                ) {
                    const breadcrumb = document.getElementById("breadcrumb-container");
                    if (breadcrumb) {
                        isAutoScrolling = true; // Marcar como automático
                        breadcrumb.scrollIntoView({ behavior: "smooth" });

                        // Resetear el estado después del desplazamiento
                        setTimeout(() => {
                            isAutoScrolling = false;
                        }, 500);
                    }
                }

                lastGridScrollPosition = gridScrollPosition;
            });
        }
    });
</script>
@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("scrollToBreadcrumbOnFirstScroll");
        }
    }
}
