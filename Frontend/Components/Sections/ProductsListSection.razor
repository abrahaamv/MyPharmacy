@using Services
@using Clients
@inject ProductsClient Client;
@inject ProductService ProductService
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager

<!-- Breadcrumb Section Begin -->
<div id="breadcrumb-container">
    <nav class="breadcrumb container" aria-label="Breadcrumb">
        <ol class="breadcrumb-list container">
            <li class="breadcrumb__item">
                <a href="/" class="breadcrumb__link">
                    <svg class="breadcrumb__icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9 22 9 12 15 12 15 22"></polyline>
                    </svg>
                    <span class="visually-hidden">Inicio</span>
                </a>
            </li>
            <li class="breadcrumb__item">
                <span class="breadcrumb__divider">/</span>
                <span class="breadcrumb__link">Productos</span>
            </li>
        </ol>
    </nav>
</div>
<!-- Breadcrumb Section End -->

<!-- Product Section Begin -->
<section class="product">
    <div class="container">
        <div class="row">
            <div class="col-lg-3 col-md-4">
                <div class="sidebar">
                    <div class="">
                        <span>Filtrar por:</span>
                    </div>
                    <div class="sidebar__item">
                        <h4>Subcategoría</h4>
                        <ul class="scrollable-list">
                            @if (ProductService.Products != null)
                            {
                                var subcategories = ProductService.Products
                                    .Where(p => p.SubCategory != null)
                                    .Select(p => p.SubCategory)
                                    .Distinct()
                                    .OrderBy(s => s);

                                foreach (var subcategory in subcategories)
                                {
                                    <li>
                                        <label>
                                            <input type="checkbox" name="subcategory" value="@subcategory" @(SelectedSubcategories.Contains(subcategory) ? "checked" : "")>
                                            @subcategory
                                        </label>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                    <div class="sidebar__item">
                        <h4>Marca</h4>
                        <ul class="scrollable-list">
                            @if (ProductService.Products != null)
                            {
                                var brands = ProductService.Products
                                    .Where(p => p.Brand != null)
                                    .Select(p => p.Brand)
                                    .Distinct()
                                    .OrderBy(b => b);

                                foreach (var brand in brands)
                                {
                                    <li>
                                        <label>
                                            <input type="checkbox" name="brand" value="@brand" @(SelectedBrands.Contains(brand) ? "checked" : "")>
                                            @brand
                                        </label>
                                    </li>
                                }
                            }
                        </ul>
                    </div>

                </div>
            </div>
            <div class="col-lg-9 col-md-7">
                <div class="filter__item">
                    <div class="row">
                        <div class="col-lg-4 col-md-3">
                            <div class="filter__found">
                                <h6>Todas las categorías</h6>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4">
                            <div class="filter__found">
                                <h6><span>@FilteredProducts?.Count</span> Productos</h6>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-5">
                            <div class="filter__sort">
                                <span>Ordenar por</span>
                                <select style="display: none;">
                                    <option class="nice-select" value="0">Precio: menor a mayor</option>
                                    <option value="0">Precio: mayor a menor </option>
                                    <option value="0">Nombre, ascendente</option>
                                    <option value="0">Nombre, descendente</option>
                                    <option value="0">Descuento</option>
                                </select>
                                <div class="nice-select" tabindex="0">
                                    <span class="current">Precio: menor a mayor</span>
                                    <ul class="list">
                                        <li data-value="0" class="option selected">Precio: menor a mayor</li>
                                        <li data-value="0" class="option">Precio: mayor a menor </li>
                                        <li data-value="0" class="option">Nombre, ascendente</li>
                                        <li data-value="0" class="option">Nombre, descendente</li>
                                        <li data-value="0" class="option">Descuento</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    @if (FilteredProducts == null || FilteredProducts.Count == 0)
                    {
                        <p>No se encontraron productos con los filtros seleccionados.</p>
                    }
                    else
                    {
                        <div class="row product__grid">
                            @foreach (var product in FilteredProducts)
                            {
                                if (product.IsInStock)
                                {
                                    <div class="col-lg-3 col-md-4 col-sm-6">
                                        <div class="product__item">
                                            <div class="product__item__pic">
                                                <img src="@product.ImageUrls[0]" alt="@product.Name" loading="lazy">
                                                <ul class="product__item__pic__hover">
                                                    <li><a href="/productos/@product.Category/@product.Slug"><i class="fa fa-info"></i></a></li>
                                                    <li><a href="/login"><i class="fa fa-heart"></i></a></li>
                                                    <li><a href="/login"><i class="fa fa-shopping-cart"></i></a></li>
                                                </ul>
                                            </div>
                                            <div class="product__item__text">
                                                <h6><a href="/productos/@product.Category/@product.Slug">@product.Name</a></h6>
                                                <h5>Q @product.ListPrice.ToString("F2")</h5>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const filterInputs = document.querySelectorAll('input[name="subcategory"], input[name="brand"]');

        // Inicializar filtros desde la URL
        const urlParams = new URLSearchParams(window.location.search);
        filterInputs.forEach((input) => {
            const paramValues = urlParams.getAll(input.name);
            if (paramValues.includes(input.value)) {
                input.checked = true;
            }
        });

        // Actualizar la URL cuando se selecciona un filtro
        filterInputs.forEach((input) => {
            input.addEventListener("change", () => {
                const updatedParams = new URLSearchParams(window.location.search);

                // Borrar los valores actuales para este filtro
                updatedParams.delete(input.name);

                // Agregar todos los valores seleccionados
                document.querySelectorAll(`input[name="${input.name}"]:checked`).forEach((checkedInput) => {
                    updatedParams.append(input.name, checkedInput.value);
                });

                // Actualizar la URL sin recargar
                const newUrl = `${window.location.pathname}?${updatedParams.toString()}`;
                history.pushState(null, "", newUrl);

                // Opcional: Llamada a una función para actualizar la UI
                console.log("Filtros actualizados:", newUrl);
            });
        });
    });
</script>

@code {
    private List<ProductSummary> FilteredProducts { get; set; } = new();
    private HashSet<string> SelectedSubcategories { get; set; } = new();
    private HashSet<string> SelectedBrands { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        await ApplyFiltersFromUrl();
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        await ApplyFiltersFromUrl();
        StateHasChanged();
    }

    private async Task ApplyFiltersFromUrl()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        SelectedSubcategories.Clear();
        SelectedBrands.Clear();

        if (queryParams.TryGetValue("subcategory", out var subcategories))
        {
            foreach (var subcategory in subcategories)
            {
                SelectedSubcategories.Add(subcategory);
            }
        }

        if (queryParams.TryGetValue("brand", out var brands))
        {
            foreach (var brand in brands)
            {
                SelectedBrands.Add(brand);
            }
        }

        if (ProductService.Products != null)
        {
            FilteredProducts = ProductService.Products
                .Where(p =>
                    (SelectedSubcategories.Count == 0 || SelectedSubcategories.Contains(p.SubCategory)) &&
                    (SelectedBrands.Count == 0 || SelectedBrands.Contains(p.Brand)))
                .ToList();
        }
        else
        {
            FilteredProducts = new List<ProductSummary>();
        }

        await Task.CompletedTask;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
