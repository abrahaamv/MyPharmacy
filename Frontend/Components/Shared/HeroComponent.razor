@using Services
@inject ProductService ProductService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<section class="hero @(!IsHomePage ? "hero-normal" : "")">
    <div class="container">
        <div class="row">
            <div class="col-lg-3">
                <div class="hero__categories">
                    <div class="hero__categories__all">
                        <i class="fa fa-bars"></i>
                        <span>Categorías</span>
                    </div>
                    <ul class="hero__categories__list">
                        @if (ProductService.Products != null)
                        {
                            var categories = ProductService.Products
                                .Select(p => p.Category)
                                .Distinct()
                                .OrderBy(c => c);

                            foreach (var category in categories)
                            {
                                <li><a href="/productos/@category">@category</a></li>
                            }
                        }
                        else
                        {
                            <li><span>Cargando categorías...</span></li>
                        }
                    </ul>
                </div>
            </div>

            <div class="col-lg-9">
                <div class="hero__search">
                    <div class="hero__search__form">
                        <form @onsubmit="SearchProduct">
                            <div class="hero__search__categories">
                                ¿Qué necesitas?
                            </div>
                            <input type="text" placeholder="Inserta el nombre de producto" @bind="SearchQuery">
                            <button type="submit" class="site-btn">Buscar</button>
                        </form>
                    </div>
                    <div class="hero__search__phone">
                        <div class="hero__search__phone__icon">
                            <img src="img/whatsapp-icon.png"/>
                        </div>
                        <div class="hero__search__phone__text">
                            <h5>+502 0000-00000</h5>
                            <span>Atención al cliente</span>
                        </div>
                    </div>
                </div>
                @if (IsHomePage)
                {
                    <div class="hero__item set-bg">
                        <div class="hero__text">
                            <span>TU SALUD, NUESTRA PRIORIDAD</span>
                            <h2>Cuando el tiempo es Vital <br />Nosotros respondemos</h2>
                            <p>Resolvemos tus emergencias con envíos inmediatos y un servicio confiable para que cuides de ti y de los que más amas</p>
                            <a href="/productos" class="primary-btn">COMPRAR AHORA</a>
                        </div>
                        <dotlottie-player
                            src="https://lottie.host/17b3d8b0-f6b8-4376-ac00-133f8490c863/oX6qVJP45K.lottie"
                            background="transparent"
                            speed="1"
                            style="width: 300px; height: 300px"
                            loop
                            autoplay
                        ></dotlottie-player>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@code {
    private bool IsHomePage { get; set; }
    private string SearchQuery { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        UpdateVisibility();
        NavigationManager.LocationChanged += (sender, args) => UpdateVisibility();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeHeroCategories");
        }
    }

    private void UpdateVisibility()
    {
        var currentUrl = NavigationManager.Uri;
        IsHomePage = currentUrl.EndsWith("/");
        StateHasChanged();
    }

    private void SearchProduct()
    {
        if (!string.IsNullOrEmpty(SearchQuery))
        {
            var query = SearchQuery;
            SearchQuery = string.Empty;
            StateHasChanged();
            NavigationManager.NavigateTo($"/productos/buscar/{query}");
        }
    }
}
